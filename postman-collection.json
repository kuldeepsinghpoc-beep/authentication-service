{
  "info": {
    "name": "Authentication Service API Tests",
    "description": "Comprehensive API test collection for Spring Boot Authentication Service",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{access_token}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Set base URL if not already set",
          "if (!pm.environment.get('base_url')) {",
          "    pm.environment.set('base_url', 'http://localhost:8080');",
          "}",
          "",
          "// Generate random test data",
          "pm.globals.set('random_username', 'user_' + Math.random().toString(36).substr(2, 9));",
          "pm.globals.set('random_email', 'test_' + Math.random().toString(36).substr(2, 9) + '@example.com');",
          "pm.globals.set('test_password', 'password123');"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:8080"
    }
  ],
  "item": [
    {
      "name": "Health Check",
      "item": [
        {
          "name": "Get Health Status",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Health check returns 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains health message', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.contain('Service is healthy');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/auth/health",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "health"]
            }
          }
        }
      ]
    },
    {
      "name": "User Registration",
      "item": [
        {
          "name": "Register New User - Success",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Registration successful', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response is JSON', function () {",
                  "    pm.response.to.be.json;",
                  "});",
                  "",
                  "pm.test('Response contains user data', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('username');",
                  "    pm.expect(responseJson.data).to.have.property('email');",
                  "    pm.expect(responseJson.data).to.have.property('firstName');",
                  "    pm.expect(responseJson.data).to.have.property('lastName');",
                  "    pm.expect(responseJson.data.username).to.eql(pm.globals.get('random_username'));",
                  "    pm.expect(responseJson.data.email).to.eql(pm.globals.get('random_email'));",
                  "});",
                  "",
                  "pm.test('User is active by default', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data.active).to.be.true;",
                  "});",
                  "",
                  "// Store user data for subsequent tests",
                  "const responseJson = pm.response.json();",
                  "pm.environment.set('test_username', responseJson.data.username);",
                  "pm.environment.set('test_email', responseJson.data.email);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{random_username}}\",\n  \"email\": \"{{random_email}}\",\n  \"password\": \"{{test_password}}\",\n  \"firstName\": \"Test\",\n  \"lastName\": \"User\",\n  \"phoneNumber\": \"+1234567890\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/register",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "register"]
            }
          }
        },
        {
          "name": "Register Duplicate Username - Conflict",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Duplicate username returns 409', function () {",
                  "    pm.response.to.have.status(409);",
                  "});",
                  "",
                  "pm.test('Error message mentions username', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.message).to.contain('Username');",
                  "    pm.expect(responseJson.message).to.contain('already taken');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{test_username}}\",\n  \"email\": \"different@example.com\",\n  \"password\": \"{{test_password}}\",\n  \"firstName\": \"Different\",\n  \"lastName\": \"User\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/register",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "register"]
            }
          }
        },
        {
          "name": "Register Invalid Data - Validation Error",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Invalid data returns 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Response contains validation errors', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.message).to.contain('Validation failed');",
                  "    pm.expect(responseJson.validationErrors).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"ab\",\n  \"email\": \"invalid-email\",\n  \"password\": \"123\",\n  \"firstName\": \"\",\n  \"lastName\": \"\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/register",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "register"]
            }
          }
        }
      ]
    },
    {
      "name": "User Authentication",
      "item": [
        {
          "name": "Login with Username - Success",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Login successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains tokens', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('accessToken');",
                  "    pm.expect(responseJson.data).to.have.property('refreshToken');",
                  "    pm.expect(responseJson.data).to.have.property('tokenType');",
                  "    pm.expect(responseJson.data).to.have.property('expiresIn');",
                  "});",
                  "",
                  "pm.test('Token type is Bearer', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data.tokenType).to.eql('Bearer');",
                  "});",
                  "",
                  "pm.test('Response contains user info', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('username');",
                  "    pm.expect(responseJson.data).to.have.property('email');",
                  "    pm.expect(responseJson.data.username).to.eql(pm.environment.get('test_username'));",
                  "});",
                  "",
                  "// Store tokens for subsequent requests",
                  "if (pm.response.code === 200) {",
                  "    const responseJson = pm.response.json();",
                  "    pm.environment.set('access_token', responseJson.data.accessToken);",
                  "    pm.environment.set('refresh_token', responseJson.data.refreshToken);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{test_username}}\",\n  \"password\": \"{{test_password}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/login",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "login"]
            }
          }
        },
        {
          "name": "Login with Email - Success",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Login with email successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains valid tokens', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data.accessToken).to.be.a('string').and.not.empty;",
                  "    pm.expect(responseJson.data.refreshToken).to.be.a('string').and.not.empty;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/login",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "login"]
            }
          }
        },
        {
          "name": "Login Invalid Credentials - Unauthorized",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Invalid credentials return 401', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Error message indicates invalid credentials', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.message).to.contain('Invalid');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{test_username}}\",\n  \"password\": \"wrongpassword\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/login",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "login"]
            }
          }
        }
      ]
    },
    {
      "name": "Token Management",
      "item": [
        {
          "name": "Validate Token - Success",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Token validation successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Token is valid', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.be.true;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/auth/validate",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "validate"]
            }
          }
        },
        {
          "name": "Refresh Token - Success",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Token refresh successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('New tokens provided', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('accessToken');",
                  "    pm.expect(responseJson.data).to.have.property('refreshToken');",
                  "});",
                  "",
                  "pm.test('New tokens are different from old ones', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data.accessToken).to.not.eql(pm.environment.get('access_token'));",
                  "});",
                  "",
                  "// Update stored tokens",
                  "if (pm.response.code === 200) {",
                  "    const responseJson = pm.response.json();",
                  "    pm.environment.set('access_token', responseJson.data.accessToken);",
                  "    pm.environment.set('refresh_token', responseJson.data.refreshToken);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refreshToken\": \"{{refresh_token}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/refresh",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "refresh"]
            }
          }
        },
        {
          "name": "Refresh Token Invalid - Unauthorized",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Invalid refresh token returns 401', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Error message indicates invalid token', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.message).to.contain('Invalid');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refreshToken\": \"invalid.refresh.token\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/refresh",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "refresh"]
            }
          }
        }
      ]
    },
    {
      "name": "Protected Endpoints",
      "item": [
        {
          "name": "Get Current User - Success",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Get current user successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains user profile', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('username');",
                  "    pm.expect(responseJson.data).to.have.property('email');",
                  "    pm.expect(responseJson.data).to.have.property('firstName');",
                  "    pm.expect(responseJson.data).to.have.property('lastName');",
                  "});",
                  "",
                  "pm.test('User data matches registered user', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data.username).to.eql(pm.environment.get('test_username'));",
                  "    pm.expect(responseJson.data.email).to.eql(pm.environment.get('test_email'));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/auth/me",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "me"]
            }
          }
        },
        {
          "name": "Get Current User Without Token - Unauthorized",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Request without token returns 401', function () {",
                  "    pm.response.to.have.status(401);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/auth/me",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "me"]
            }
          }
        },
        {
          "name": "Logout User - Success",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Logout successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Logout message confirmed', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.contain('Logout successful');",
                  "});",
                  "",
                  "// Clear tokens after logout",
                  "pm.environment.unset('access_token');",
                  "pm.environment.unset('refresh_token');"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/auth/logout",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "logout"]
            }
          }
        }
      ]
    },
    {
      "name": "Error Scenarios",
      "item": [
        {
          "name": "Malformed JSON - Bad Request",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Malformed JSON returns 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error message indicates malformed JSON', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.message).to.contain('Malformed');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{invalid json}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/register",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "register"]
            }
          }
        },
        {
          "name": "Unsupported Method - Method Not Allowed",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Unsupported method returns 405', function () {",
                  "    pm.response.to.have.status(405);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/auth/register",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "register"]
            }
          }
        },
        {
          "name": "Non-existent Endpoint - Not Found",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Non-existent endpoint returns 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/auth/nonexistent",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "nonexistent"]
            }
          }
        }
      ]
    }
  ]
}